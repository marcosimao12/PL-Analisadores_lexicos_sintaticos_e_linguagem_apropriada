
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftplusminuslefttimesdividealeatorio colon comma comment concat const divide entrada equals escrever fim fold funcao lbracket lparen map minus num plus programa rbracket rparen semicolon string times var varidprogram : programa varid declarations statementsdeclarations : declaration\n                        | declarations declarationdeclaration : var varid semicolon\n                       | const varid equals num semicolonstatements : statement\n                      | statements statementstatement : assignment\n                     | print_stmtassignment : varid equals expression semicolonprint_stmt : escrever varid semicolonexpression : expression plus term\n                      | expression minus term\n                      | termterm : term times factor\n                | term divide factor\n                | factorfactor : num\n                  | varid\n                  | lparen expression rparen'
    
_lr_action_items = {'programa':([0,],[2,]),'$end':([1,9,11,12,13,18,28,30,],[0,-1,-6,-8,-9,-7,-11,-10,]),'varid':([2,4,5,6,7,9,10,11,12,13,14,17,18,20,27,28,30,31,32,33,34,36,],[3,8,-2,15,16,8,-3,-6,-8,-9,19,22,-7,-4,22,-11,-10,22,22,22,22,-5,]),'var':([3,4,5,10,20,36,],[6,6,-2,-3,-4,-5,]),'const':([3,4,5,10,20,36,],[7,7,-2,-3,-4,-5,]),'escrever':([4,5,9,10,11,12,13,18,20,28,30,36,],[14,-2,14,-3,-6,-8,-9,-7,-4,-11,-10,-5,]),'equals':([8,16,],[17,21,]),'semicolon':([15,19,22,23,24,25,26,29,37,38,39,40,41,],[20,28,-19,30,-14,-17,-18,36,-12,-13,-15,-16,-20,]),'num':([17,21,27,31,32,33,34,],[26,29,26,26,26,26,26,]),'lparen':([17,27,31,32,33,34,],[27,27,27,27,27,27,]),'times':([22,24,25,26,37,38,39,40,41,],[-19,33,-17,-18,33,33,-15,-16,-20,]),'divide':([22,24,25,26,37,38,39,40,41,],[-19,34,-17,-18,34,34,-15,-16,-20,]),'plus':([22,23,24,25,26,35,37,38,39,40,41,],[-19,31,-14,-17,-18,31,-12,-13,-15,-16,-20,]),'minus':([22,23,24,25,26,35,37,38,39,40,41,],[-19,32,-14,-17,-18,32,-12,-13,-15,-16,-20,]),'rparen':([22,24,25,26,35,37,38,39,40,41,],[-19,-14,-17,-18,41,-12,-13,-15,-16,-20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([3,],[4,]),'declaration':([3,4,],[5,10,]),'statements':([4,],[9,]),'statement':([4,9,],[11,18,]),'assignment':([4,9,],[12,12,]),'print_stmt':([4,9,],[13,13,]),'expression':([17,27,],[23,35,]),'term':([17,27,31,32,],[24,24,37,38,]),'factor':([17,27,31,32,33,34,],[25,25,25,25,39,40,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> programa varid declarations statements','program',4,'p_program','fca_grammar.py',22),
  ('declarations -> declaration','declarations',1,'p_declarations','fca_grammar.py',26),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','fca_grammar.py',27),
  ('declaration -> var varid semicolon','declaration',3,'p_declaration','fca_grammar.py',34),
  ('declaration -> const varid equals num semicolon','declaration',5,'p_declaration','fca_grammar.py',35),
  ('statements -> statement','statements',1,'p_statements','fca_grammar.py',42),
  ('statements -> statements statement','statements',2,'p_statements','fca_grammar.py',43),
  ('statement -> assignment','statement',1,'p_statement','fca_grammar.py',50),
  ('statement -> print_stmt','statement',1,'p_statement','fca_grammar.py',51),
  ('assignment -> varid equals expression semicolon','assignment',4,'p_assignment','fca_grammar.py',55),
  ('print_stmt -> escrever varid semicolon','print_stmt',3,'p_print_stmt','fca_grammar.py',59),
  ('expression -> expression plus term','expression',3,'p_expression','fca_grammar.py',63),
  ('expression -> expression minus term','expression',3,'p_expression','fca_grammar.py',64),
  ('expression -> term','expression',1,'p_expression','fca_grammar.py',65),
  ('term -> term times factor','term',3,'p_term','fca_grammar.py',72),
  ('term -> term divide factor','term',3,'p_term','fca_grammar.py',73),
  ('term -> factor','term',1,'p_term','fca_grammar.py',74),
  ('factor -> num','factor',1,'p_factor','fca_grammar.py',81),
  ('factor -> varid','factor',1,'p_factor','fca_grammar.py',82),
  ('factor -> lparen expression rparen','factor',3,'p_factor','fca_grammar.py',83),
]
